""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"BEGIN VUNDLE CONFIG

set nocompatible " be iMproved
filetype off                   " required!

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle
" required!
Bundle 'gmarik/vundle'

" MY BUNDLES
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Auto-complete
""""""""""""""""""""""""""
" Speedy, as-you-type autocompletion
" IMPORTANT: This has a compiled component.
" If you install/update with vundle you may have to recompile (not too hard).
" Follow the instructions here: http://valloric.github.io/YouCompleteMe/
Bundle 'Valloric/YouCompleteMe'

" A less powerful auto-complete that doesn't require compiled component
"Bundle 'ervandew/supertab'

" other github repos
""""""""""""""""""""""""""
"Editor config ala editorconfig.org
Bundle 'editorconfig/editorconfig-vim.git'
" Solarized Colorscheme
Bundle 'altercation/vim-colors-solarized'
" Easy commenting/uncommenting
Bundle 'scrooloose/nerdcommenter'
" File explorer
Bundle 'scrooloose/nerdtree'
" Makes the same nerdtree available in all tab views
Bundle 'jistr/vim-nerdtree-tabs'
" Adds git status flags to nerdtree entries
Bundle 'Xuyuanp/nerdtree-git-plugin'
" Jshint for vim
"Bundle 'wookiehangover/jshint.vim'
" Jshint for vim
Bundle 'scrooloose/syntastic'
" Indexes points of interest within document for various languages
Bundle 'vim-scripts/taglist.vim.git'
" syntax highlighting for moustache/handlebars templates
Bundle 'juvenn/mustache.vim.git'
" Extend % to match things other than braces (like HTML tags)
Bundle 'jwhitley/vim-matchit'
" Insert/modify surrounding tags/quotes/brackets/etc..
Bundle 'tpope/vim-surround'
" Call terminal commands from vim in the background
" Useful for compiling, linting, testing
Bundle 'tpope/vim-dispatch'
" Run mocha from vim
Bundle 'geekjuice/vim-mocha'
" Treat buffers more like tabs in typical GUI editors
" See discussion here: http://stackoverflow.com/a/103590/1599617
Bundle 'fholgado/minibufexpl.vim'
" Coffescript syntax highlighting
Bundle 'kchmck/vim-coffee-script'
" Scala highlighting
Bundle 'derekwyatt/vim-scala'
" Less css syntax highlighting
Bundle 'groenewege/vim-less'
" Slim template syntax highlighting
Bundle 'slim-template/vim-slim.git'
" Better javascript indentation (required by vim-jsx)
Bundle 'pangloss/vim-javascript'
" JSX highlighting (depends on vim-javascript)
Bundle 'mxw/vim-jsx'
" syntax autocompletion for js libraries
"Bundle 'othree/javascript-libraries-syntax.vim'
" fuzzy file finder
Bundle 'kien/ctrlp.vim'
" Git integration
"Bundle 'tpope/vim-fugitive'
" Indentation lines
"Bundle 'Yggdroot/indentLine'
Bundle 'nathanaelkane/vim-indent-guides'
" Git gutter
Bundle 'airblade/vim-gitgutter'
" Better status line
Bundle 'bling/vim-airline'

" non github repos
""""""""""""""""""
" Easier file opening
"Bundle 'git://git.wincent.com/command-t.git'

" vim-scripts repos
"""""""""""""""""""
"Bundle 'L9'
"Bundle 'FuzzyFinder'

" Restore filetype settings
filetype plugin indent on     " required!
syntax on
"
" Brief help
" :BundleList          - list configured bundles
" :BundleInstall(!)    - install(update) bundles
" :BundleSearch(!) foo - search(or refresh cache first) for foo
" :BundleClean(!)      - confirm(or auto-approve) removal of unused bundles
"
" see :h vundle for more details or wiki for FAQ
" NOTE: comments after Bundle command are not allowed..

"END VUNDLE CONFIG
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


" TMUX FIXES
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Fixes modified keys from tmux with xterm keys enabled.
" This allows things like Ctrl + Left_Arrow to work properly in tmux.
" Gleaned from http://unix.stackexchange.com/a/34723/71994
if &term =~ '^screen'
    " tmux will send xterm-style keys when xterm-keys is on
    execute "set <xUp>=\e[1;*A"
    if &term =~ '^screen'
       execute
    endif
    execute "set <xDown>=\e[1;*B"
    execute "set <xRight>=\e[1;*C"
    execute "set <xLeft>=\e[1;*D"
endif

" CTRLP
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_max_depth = 40
" Ignore everything in .gitignore
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files . -co --exclude-standard', 'find %s -type f']

" JSX-highlighting
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:jsx_ext_required = 0


" Syntastic
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""" To set up eslint:
" npm install -g eslint
" npm install -g babel-eslint
" npm install -g eslint-plugin-react
"""
let g:syntastic_javascript_checkers = ['eslint']

" Use locally installed eslint if available:
let s:eslint_path = system('PATH=$(npm bin):$PATH && which eslint')
let b:syntastic_javascript_eslint_exec = substitute(s:eslint_path, '^\n*\s*\(.\{-}\)\n*\s*$', '\1', '')

" Recommended settings
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
" Location list is annoying. Maybe someday, though.
let g:syntastic_auto_loc_list = 0

" indentline
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:indentLine_char = 'Â¦'
let g:indentLine_color_term = 239
let g:indentLine_color_tty_light = 7 " (default: 4)
let g:indentLine_color_dark = 1 " (default: 2)

" indent-guides
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"let g:indent_guides_auto_colors = 0
"let g:indent_guides_enable_on_vim_startup = 1
"autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=black ctermbg=235
"autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=darkgrey ctermbg=234

" airline
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:airline#extensions#tabline#formatter = 'unique_tail'

" grep
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" TODO figure these out
" bind K to grep word under cursor
"nnoremap K : "\b<C-R><C-W>\b"<CR>:cw<CR>

" bind \ (backward slash) to grep shortcut
"command! -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
"nnoremap \ :grep!<SPACE>

" search/replace
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Replace word under cursor globally
nnoremap <Leader>a :%s/\<<C-r><C-w>\>/

" Replace word under cursor in line
nnoremap <Leader>s :s/\<<C-r><C-w>\>/

" Search word under cursor
nnoremap <Leader>s :/\<<C-r><C-w>\>/

" MOCHA - js unit tests
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Run grunt instead of mocha. Kind of hacky, but it works.
let g:mocha_js_command = "!grunt test"
map <Leader>t :call RunCurrentSpecFile()<CR>
"map <Leader>s :call RunNearestSpec()<CR>
"map <Leader>l :call RunLastSpec()<CR>
map <Leader>a :call RunAllSpecs()<CR>
" TAGLIST
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let Tlist_Use_Right_Window = 1

" MINIBUFEXPLORER
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MiniBufExplorer set status line to empty
let g:miniBufExplStatusLineText=''

let g:miniBufExplBuffersNeeded = 0

" Use Control-Tab and Control-Shift-Tab to flip through buffers in current window
" TODO Can't do this because TAB is itself a control key (ctrl+i)
"noremap <C-TAB>   :MBEbn<CR>
"noremap <C-S-TAB> :MBEbp<CR>
" ...In most-recently-used fashion.
"noremap <C-TAB>   :MBEbf<CR>
"noremap <C-S-TAB> :MBEbb<CR>

" NERDTREE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" open and close NERDTree with <Tab>
map <Tab> :NERDTreeToggle<cr>

"" load NERDTree on vim start if opened without file args
autocmd VimEnter * if !argc() | NERDTree | endif
autocmd StdinReadPre * let s:std_in=1

" Close vim if the only window left is NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

" Close NERDTree upon opening a file
let NERDTreeQuitOnOpen=1

" STARTUP
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"enable the matchit plugin to enable jumping between open and closing
"HTML tags (among other things)
runtime macros/matchit.vim
autocmd BufWritePre * :%s/\s\+$//e "removes all trailing whitespace upon :w

"source ~/dotfiles/google_python_style.vim

" FILETYPES
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd BufNewFile,BufReadPost *.md set filetype=markdown

" COLORSCHEME
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
syntax enable
"let g:solarized_termtrans=0 " Set terminal to transparent mode
set t_Co=256 " Force 256 colors
let g:solarized_termcolors=256
set background=dark
colorscheme solarized
"highlight Normal ctermfg=grey ctermbg=NONE " Set foreground/bg

"autocompletion highlight colors
highlight  Pmenu      cterm=NONE ctermfg=white ctermbg=blue
highlight  PmenuSel   cterm=NONE ctermfg=black ctermbg=white
highlight  PmenuSbar  cterm=NONE ctermfg=white ctermbg=white
highlight  PmenuThumb cterm=NONE ctermfg=white ctermbg=cyan

"bold characters past the 79th column
highlight OverLength cterm=bold
"autocmd BufNewFile,BufRead * match OverLength /\%>79v.\+/

"highlight columns past the 80th column
let &colorcolumn=join(range(81,999),",")

" Display line numbers along left side
set nu

" Less obnoxious highlighting
"highlight Special cterm=NONE ctermfg=64
"highlight StorageClass cterm=NONE ctermfg=64
"highlight Structure cterm=NONE ctermfg=64
"highlight PreProc cterm=NONE ctermfg=64
"highlight Type cterm=NONE ctermfg=33
"highlight Operator cterm=NONE ctermfg=33

" BEHAVIOR
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"enable the mouse
"set mouse=a

" Window height 0 removes line number from bot of windows
"set wmh=0

"does case-sensitive matching if the search string contains caps
set ignorecase
set smartcase

"set the tab key to insert 2 spaces
set tabstop=2
set shiftwidth=2
" use spaces instead of tabs
set expandtab
set backspace=indent,eol,start

"hilite tab characters
set lcs=tab:>-
"set list!

"show keys as they're pressed in normal mode
set showcmd

"make the cursor always stay at least 3 lines from the top or bottom of the
"screen
set scrolloff=3

" modify buffers on switch (autosave)
"set autowrite

"" don't open buffers in new window when modified buffer exists
"set hidden


" GENERAL MAPPINGS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"map Control-t to new tab
map <C-t> :tabnew

"always show the tab bar
set showtabline=2

"set C-x to quit the current tab
map <C-x> :q<cr>

"map the space bar to toggle comments using NERD Commenter
map <Space> \c<Space>

" control + arrow key to navigate windows
nnoremap <silent> <C-Right> <c-w>l
nnoremap <silent> <C-Left> <c-w>h
nnoremap <silent> <C-Up> <c-w>k
nnoremap <silent> <C-Down> <c-w>j

"set keybindings for moving betwen tabs
nmap <ESC>[5D :tabprevious<cr>
nmap <ESC>[5C :tabnext<cr>
map  <ESC>[5D :tabprevious<cr>
map  <ESC>[5C :tabnext<cr>
imap <ESC>[5D <ESC>:tabprevious<cr>i
imap <ESC>[5C <ESC>:tabnext<cr>i

"disable the arrow keys to develop your vim master1337skillz!
"inoremap  <Up>     <Esc>:echo "use k"<cr>
"inoremap  <Down>   <Esc>:echo "use j"<cr>
"inoremap  <Left>   <Esc>:echo "use h"<cr>
"inoremap  <Right>  <Esc>:echo "use l"<cr>
"noremap   <Up>     :echo "use k"<cr>
"noremap   <Down>   :echo "use j"<cr>
"noremap   <Left>   :echo "use h"<cr>
"noremap   <Right>  :echo "use l"<cr>

"turn off php variable highliting
"autocmd BufNewFile,BufRead * highlight phpIdentifier cterm=NONE ctermfg=NONE

